barplot(eda_apm$avgAPM, names.arg = eda_apm$LeagueIndex, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM')
#APM pw t-test
pw_apm <- main %>% pairwise_t_test(APM ~ LeagueIndex, pool.sd = FALSE)
#APM pw t-test boxplot
apm_plot <- pw_apm %>%
add_xy_position(x='LeagueIndex', step.increase = 1)
ggboxplot(main, x='LeagueIndex', y='APM') +
stat_pvalue_manual(apm_plot, hide.ns = TRUE)
View(main)
#expand.grid for all unique classes from the two race class columns
p1_race <- unique(match_hist$player_1_race)
p2_race <- unique(match_hist$player_2_race)
race_combi <- expand.grid(race1 = p1_race, race2 = p2_race)
print(race_combi)
#make function that will take in the row of the expand grid
#and returns wr percentage for each race against each combination
#of other races including itself.
combo_percs <- sapply(1:nrow(race_combi), function(i){
#get the races for the row
race1 <- race_combi[i,1]
race2 <- race_combi[i,2]
#subset dataset to only get the rows for race 1 and 2 that we want
subset_result12 <- match_hist$player_1_match_status[match_hist$player_1_race == race1 & match_hist$player_2_race == race2]
#calc wr again using same formula as before
win_sum <- sum(subset_result12 == '[winner]')
len_subset <- length(subset_result12)
return((win_sum/len_subset)*100)
})
perc_combos <- data.frame(Class_Combo = apply(race_combi, 1, paste, collapse = "-"),
Win_Percentage = combo_percs)
print(perc_combos)
barplot(names.arg = perc_combos$Class_Combo, perc_combos$Win_Percentage, main = 'Win Rate of Each Race vs Race Combination', col='lightblue', ylab = 'Win Rate (%)', xlab='Each Race vs Race Combination', ylim = c(0,100))
View(race_combi)
View(perc_combos)
#expand.grid for all unique classes from the two race class columns
p1_race <- unique(match_hist$player_1_race)
p2_race <- unique(match_hist$player_2_race)
race_combi <- expand.grid(race1 = p1_race, race2 = p2_race)
print(race_combi)
#make function that will take in the row of the expand grid
#and returns wr percentage for each race against each combination
#of other races including itself.
combo_percs <- sapply(1:nrow(race_combi), function(i){
#get the races for the row
race1 <- race_combi[i,1]
race2 <- race_combi[i,2]
#subset dataset to only get the rows for race 1 and 2 that we want
subset_result12 <- match_hist$player_1_match_status[match_hist$player_1_race == race1 & match_hist$player_2_race == race2]
#calc wr again using same formula as before
win_sum <- sum(subset_result12 == '[winner]')
len_subset <- length(subset_result12)
return((win_sum/len_subset)*100)
})
perc_combos <- data.frame(Class_Combo = apply(race_combi, 1, paste, collapse = "-"),
Win_Percentage = combo_percs)
print(perc_combos)
barplot(names.arg = perc_combos$Class_Combo, perc_combos$Win_Percentage, main = 'Win Rate of Each Race vs Race Combination by Player 1 Perspective', col='lightblue', ylab = 'Win Rate (%)', xlab='Each Race vs Race Combination', ylim = c(0,100))
#expand.grid for all unique classes from the two race class columns
p1_race <- unique(match_hist$player_1_race)
p2_race <- unique(match_hist$player_2_race)
race_combi <- expand.grid(race1 = p1_race, race2 = p2_race)
print(race_combi)
#make function that will take in the row of the expand grid
#and returns wr percentage for each race against each combination
#of other races including itself.
combo_percs <- sapply(1:nrow(race_combi), function(i){
#get the races for the row
race1 <- race_combi[i,1]
race2 <- race_combi[i,2]
#subset dataset to only get the rows for race 1 and 2 that we want
subset_result12 <- match_hist$player_1_match_status[match_hist$player_1_race == race1 & match_hist$player_2_race == race2]
#calc wr again using same formula as before
win_sum <- sum(subset_result12 == '[winner]')
len_subset <- length(subset_result12)
return((win_sum/len_subset)*100)
})
perc_combos <- data.frame(Class_Combo = apply(race_combi, 1, paste, collapse = "-"),
Win_Percentage = combo_percs)
print(perc_combos)
barplot(names.arg = perc_combos$Class_Combo, perc_combos$Win_Percentage, main = 'Win Rate of Each Race vs Race Combination (Player 1 Perspective)', col='lightblue', ylab = 'Win Rate (%)', xlab='Each Race vs Race Combination', ylim = c(0,100))
#expand.grid for all unique classes from the two race class columns
p1_race <- unique(match_hist$player_1_race)
p2_race <- unique(match_hist$player_2_race)
race_combi <- expand.grid(race1 = p1_race, race2 = p2_race)
print(race_combi)
#make function that will take in the row of the expand grid
#and returns wr percentage for each race against each combination
#of other races including itself.
combo_percs <- sapply(1:nrow(race_combi), function(i){
#get the races for the row
race1 <- race_combi[i,1]
race2 <- race_combi[i,2]
#subset dataset to only get the rows for race 1 and 2 that we want
subset_result12 <- match_hist$player_1_match_status[match_hist$player_1_race == race1 & match_hist$player_2_race == race2]
#calc wr again using same formula as before
win_sum <- sum(subset_result12 == '[winner]')
len_subset <- length(subset_result12)
return((win_sum/len_subset)*100)
})
perc_combos <- data.frame(Class_Combo = apply(race_combi, 1, paste, collapse = "-"),
Win_Percentage = combo_percs)
print(perc_combos)
#remove duplicate combinations (remove rows: 4, 7, 9):
perc_combos_filtered <- perc_combos[-c(4,7,9), ]
barplot(names.arg = perc_combos_filtered$Class_Combo, perc_combos_filtered$Win_Percentage, main = 'Win Rate of Each Race vs Race Combination (1st Perspective)', col='lightblue', ylab = 'Win Rate (%)', xlab='Each Race vs Race Combination', ylim = c(0,100))
hist(apm_anova$residuals, main='APM ANOVA Testing; APM ~ Race', colors = 'lightblue')
#ANOVA testing on this to see how avg APM and SPM differ for different races
#make race col a factor instead of character col:
iem_players$Race <- as.factor(iem_players$Race)
#APM per Race anova
apm_anova <- aov(APM ~ Race, data = iem_players)
#SPM per Race anova
spm_anova <- aov(SPM ~ Race, data = iem_players)
hist(apm_anova$residuals, main='APM ANOVA Testing; APM ~ Race', colors = 'lightblue')
hist(spm_anova$residuals, main='SPM ANOVA Testing; SPM ~ Race')
hist(apm_anova$residuals, main='APM ANOVA Testing; APM ~ Race', fill = 'lightblue')
hist(spm_anova$residuals, main='SPM ANOVA Testing; SPM ~ Race')
hist(apm_anova$residuals, main='APM ANOVA Testing; APM ~ Race', col = 'lightblue')
hist(spm_anova$residuals, main='SPM ANOVA Testing; SPM ~ Race')
hist(apm_anova$residuals, main='APM ANOVA Testing; APM ~ Race', col = 'lightblue')
hist(spm_anova$residuals, main='SPM ANOVA Testing; SPM ~ Race', col = 'lightblue')
ggplot(iem_players) +
aes(x = Race, y = SPM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='SPM per Race Class') + scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='APM per Race Class')+ scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='APM per Race Class',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D')) + legend()
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='APM per Race Class',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "bottom") + labs(title='APM per Race Class',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() + labs(title='APM per Race Class',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))+
theme(legend.position = "bottom")
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='APM per Race Class',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = APM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='APM per Race Class (Protoss, Terran, Zerg)',
labels = c('Protoss', 'Terran', 'Zerg')) +
scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
ggplot(iem_players) +
aes(x = Race, y = SPM, fill = Race) +
geom_boxplot() +
theme(legend.position = "none") + labs(title='SPM per Race Class (Protoss, Terran, Zerg)') + scale_fill_manual(values = c('#F8DC52', '#315BE6', '#25033D'))
View(eda_apm)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
barplot(eda_apm$avgAPM, names.arg = eda_apm$LeagueIndex, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM')
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM')
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM', las = 2)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM',
las = 2, cex.axis = 0.8)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
par(mar = c(7, 5, 4, 2))
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM',
las = 2, cex.axis = 0.8)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
par(mar = c(7, 5, 4, 2))
barplot(eda_apm$avgAPM, names.arg = eda_apm$rank, main='Avg APM By Rank/LeagueIndex 1-8', xlab='Rank 1-8 (1=Bronze to 8=Professional)', ylab='Avg APM',
las = 2, cex.axis = 0.8)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_minimal()
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_minimal() +
theme(
panel.grid.major = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) + theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$Rank <-factor(eda_apm$Rank, levels = rank_order)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) + theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) + theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
#theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity", fill = rank) +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#A0DDAD', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM, fill = rank)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#028A0F', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM, fill = rank)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
theme(axis.text.x = element_text(angle = 45)) +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black")
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#028A0F', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM, fill = rank)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black"),
axis.text.x = element_text(angle = 45)
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#028A0F', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM, fill = rank)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 2)
)
#rank labels
ranks <- c('bronze', 'silver', 'gold', 'platinum', 'diamond', 'master', 'grandmaster', 'professional')
#rank colors:
rank_colors <- c('#CD7F32', '#C0C0C0', '#FFF59E', '#028A0F', '#B9F2FF', '#04D9FF', '#4f6100', '#E75480')
#groupby rank, summarize avg APM, then plot
eda_apm <- main %>% group_by(LeagueIndex) %>% summarize(avgAPM = mean(APM)) %>% mutate(rank = ranks[LeagueIndex])
#make rank col factor
eda_apm$rank <-factor(eda_apm$rank, levels = ranks)
ggplot(eda_apm, aes(x = rank, y = avgAPM, fill = rank)) +
geom_bar(stat = "identity") +
labs(title = "Average APM by Rank", x = "Rank", y = "Average APM") +
scale_fill_manual(values = rank_colors) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "black"),
axis.line = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
