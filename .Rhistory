library(streamgraph)
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
install.packages("htmltools")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(htmltools)
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
library(htmltools)
install.packages("htmltools")
library(plotly)
install.packages("htmltools")
library(shiny)
library(ggplot2)
library(dplyr)
install.packages("htmltools")
library(plotly)
install.packages("htmltools")
library(shiny)
library(ggplot2)
library(dplyr)
install.packages("htmltools")
library(plotly)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(plotly)
library(shiny)
install.packages("fastmap")
library(shiny)
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap")
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(rmarkdown)
library(knitr)
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
reticulate::use_condaenv("dsan5200",required=TRUE)
reticulate::repl_python()
import pandas as pd
import plotly.graph_objs as go
from plotly.offline import init_notebook_mode, iplot
file_path = "C:/Users/73587/OneDrive - Wake Forest University/Desktop/DSAN5300Proj/data/percentage_data.csv"
# Read the CSV file into a DataFrame
percentage_data = pd.read_csv(file_path)
# Initialize notebook mode for Plotly (useful in Jupyter notebooks)
init_notebook_mode(connected=True)
# Example data filtering (adjust according to your actual DataFrame)
# filtered_data = percentage_data[(percentage_data['Rank'] == 'Silver') & (percentage_data['Region'] == 'CN')]
# Create traces for each combination of Rank and Region
traces = []
for rank in percentage_data['Rank'].unique():
for region in percentage_data['Region'].unique():
df = percentage_data[(percentage_data['Rank'] == rank) & (percentage_data['Region'] == region)]
for race in df['Race'].unique():
trace = go.Scatter(
x=df[df['Race'] == race]['Season'],
y=df[df['Race'] == race]['Percentage'],
name=f"{rank} - {region} - {race}",
visible=(rank == 'Silver' and region == 'CN')  # Only the default selection is visible
)
traces.append(trace)
# Define the layout with dropdown menus
layout = go.Layout(
title="Percentage of Players in Each Race",
xaxis={'title': 'Season'},
yaxis={'title': 'Percentage'},
updatemenus=[
{
'buttons': [
{
'method': 'update',
'label': f'{rank} - {region}',
'args': [{'visible': [t.name == f"{rank} - {region} - {race}" for t in traces]}
for race in percentage_data['Race'].unique()],
}
for rank in percentage_data['Rank'].unique()
for region in percentage_data['Region'].unique()
],
'direction': 'down',
'showactive': True,
}
]
)
fig = go.Figure(data=traces, layout=layout)
iplot(fig)
import pandas as pd
import plotly.graph_objs as go
# Assuming you have loaded your data into percentage_data DataFrame
file_path = "C:/Users/73587/OneDrive - Wake Forest University/Desktop/DSAN5300Proj/data/percentage_data.csv"
percentage_data = pd.read_csv(file_path)
# Generate traces for all combinations, but initially set them to invisible
traces = []
for rank in percentage_data['Rank'].unique():
for region in percentage_data['Region'].unique():
df = percentage_data[(percentage_data['Rank'] == rank) & (percentage_data['Region'] == region)]
for race in df['Race'].unique():
trace = go.Scatter(
x=df['Season'],
y=df['Percentage'],
name=f"{rank} - {region} - {race}",
visible=False  # Initially hide all traces
)
traces.append(trace)
# Define initial visibility
for i, trace in enumerate(traces):
if 'Silver - CN' in trace.name:
traces[i]['visible'] = True
# Create the figure object
fig = go.Figure(traces)
# Define the dropdown buttons
rank_buttons = []
for rank in percentage_data['Rank'].unique():
rank_buttons.append(
dict(
args=[{"visible": [rank in t.name for t in traces]}],
label=rank,
method="restyle"
)
)
region_buttons = []
for region in percentage_data['Region'].unique():
region_buttons.append(
dict(
args=[{"visible": [region in t.name for t in traces]}],
label=region,
method="restyle"
)
)
# Update the layout with the dropdowns
fig.update_layout(
updatemenus=[
dict(
buttons=rank_buttons,
direction="down",
showactive=True,
x=0,
xanchor="left",
y=1.1,
yanchor="top",
title="Rank"
),
dict(
buttons=region_buttons,
direction="down",
showactive=True,
x=0.15,
xanchor="left",
y=1.1,
yanchor="top",
title="Region"
)
],
title="Percentage of Players in Each Race",
xaxis=dict(title='Season'),
yaxis=dict(title='Percentage')
)
# Show the figure
fig.show()
quit
library(ggplot2)
library(dplyr)
library(plotly)
install.packages("nbformat")
